import streamlit as st
import pandas as pd
import plotly.express as px

# Page config
st.set_page_config(page_title="Var-SaoKe", page_icon='üîç')

# Table name
TABLE_NAME = "transactions"

# Database connection
connection = st.connection('postgresql', type='sql')

# App title
st.title("ü´°Sao K√™ Giao D·ªãch MTTQVN")
st.write("ü™¥·ª¶ng h·ªô ƒë·ªìng b√†o Mi·ªÅn B·∫Øc kh·∫Øc ph·ª•c h·∫≠u qu·∫£ g√¢y ra b·ªüi b√£o Yagi")
st.write("üìëD·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p b·ªüi MTTQVN (t·ª´ 1/9/2024 ƒë·∫øn 10/9/2024)")

tab1, tab2 = st.tabs(["Tra c·ª©u GD", "Bi·ªÉu ƒë·ªì"])

with tab1:
    st.subheader("Tra C·ª©u Giao D·ªãch")

    # User input
    search_text = st.text_input("Nh·∫≠p m√£ giao d·ªãch, ng∆∞·ªùi giao d·ªãch, ho·∫∑c n·ªôi dung b·∫•t k·ª≥:")

    # Query and display results only if there is input
    if search_text:
        query = f"SELECT * FROM {TABLE_NAME} WHERE content LIKE '%{search_text}%'"
        # Use parameterized query to avoid SQL injection
        df = connection.query(query)

        # Check if any results are found
        if not df.empty:
            # Display matching transactions
            st.success(f"T√¨m th·∫•y {len(df)} giao d·ªãch tr√πng kh·ªõp:")
            st.dataframe(df)
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£")
    
    st.warning("DISCLAIM: Page ƒë∆∞·ª£c build v·ªõi m·ª•c ƒë√≠ch h·ªçc t·∫≠p, kh√¥ng nh·∫±m m·ª•c ƒë√≠ch g√¢y k√≠ch ƒë·ªông, b·∫°o l·ª±c, ch√≠nh tr·ªã, hay b·∫•t k·ª≥ m·ª•c ƒë√≠ch n√†o kh√°c")

with tab2:
    st.subheader("Distribution Chart")

    query = f"SELECT credit FROM {TABLE_NAME}"
    df_chart = connection.query(query)

    # Define the bins and labels for credit amounts
    bins = [0, 10000, 20000, 50000, 100000, 200000, 500000, 1000000, 5000000, 10000000, 50000000, 100000000, 500000000, 1000000000]
    labels = ["(1, 10k)", "[10k, 20k]", "[20k, 50k]", "[50k, 100k]", "[100k, 200k]", "[200k, 500k]", "[500k, 1M]", "[1M, 5M]", "[5M, 10M]", "[10M, 50M]", "[50M, 100M]", "[100M, 500M]", "[500M, 1B]"]

    # Categorize credit amounts into bins
    df_chart['credit_category'] = pd.cut(df_chart['credit'], bins=bins, labels=labels)

    # Count the occurrences in each bin
    credit_distribution = df_chart['credit_category'].value_counts().sort_index()

    # Convert to DataFrame for plotting
    df_distribution = pd.DataFrame({'Credit Range': credit_distribution.index, 'Count': credit_distribution.values})

    # Plot the distribution
    fig = px.bar(df_distribution, x='Credit Range', y='Count', title="Bi·ªÉu ƒë·ªì ph√¢n b·ªë s·ªë ti·ªÅn ·ªßng h·ªô t·ª´ c√°c nh√† h·∫£o t√¢m!",
                 labels={"Credit Range": "S·ªë ti·ªÅn", "Count": "S·ªë l∆∞·ª£ng GD"})

    st.plotly_chart(fig)
